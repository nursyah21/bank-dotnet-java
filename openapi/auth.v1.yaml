openapi: 3.0.0
info:
  title: Auth Management API
  version: v1

components:
  schemas:
    username:
      type: string
      minLength: 4
      maxLength: 20
      pattern: '^[a-zA-Z0-9_]+$'
    password:
      type: string
      minLength: 8
      pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^a-zA-Z0-9]).+$'
    saldo:
      type: number
      format: float
    email:
      type: string
      format: email
    birthdate:
      type: string
      pattern: '^\\d{4}-\\d{2}-\\d{2}$'
    no_id:
      type: string
      pattern: '^\\d{10}$'
    id:
      type: string
      format: uuid
    role:
      type: string
      enum: [admin, user, customer]

paths:
  /login:
    post:
      description: Return JWT token (1 hour), set as HttpOnly and SameSite=Lax
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/username'
                password:
                  $ref: '#/components/schemas/password'
      responses:
        '200':
          description: Login success
        '400':
          description: Invalid credentials
        '403':
          description: Already authenticated (optional)

  /register:
    post:
      description: Register new user with role customer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/username'
                email:
                  $ref: '#/components/schemas/email'
                password:
                  $ref: '#/components/schemas/password'
                birthdate:
                  $ref: '#/components/schemas/birthdate'
      responses:
        '201':
          description: Register success
        '400':
          description: Invalid input

  /logout:
    get:
      description: Invalidate JWT token
      parameters:
        - name: jwt-token
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Logout success
        '401':
          description: Token missing or invalid

  /me:
    get:
      description: Check if JWT token is still valid
      parameters:
        - name: jwt-token
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Authenticated user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/id'
                  username:
                    $ref: '#/components/schemas/username'
                  email:
                    $ref: '#/components/schemas/email'
                  birthdate:
                    $ref: '#/components/schemas/birthdate'
                  role:
                    $ref: '#/components/schemas/role'
                  balance:
                    $ref: '#/components/schemas/saldo'
        '401':
          description: Token missing or invalid
        '403':
          description: Role not permitted (optional)

  /reset-password:
    post:
      description: Request reset password link via email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/email'
      responses:
        '201':
          description: Link sent
        '400':
          description: Invalid email

    get:
      description: Validate reset token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Token valid
        '400':
          description: Token invalid

    put:
      description: Change password using reset token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tokenReset:
                  type: string
                password:
                  $ref: '#/components/schemas/password'
      responses:
        '200':
          description: Password changed
        '400':
          description: Invalid token or password
