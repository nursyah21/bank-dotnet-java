openapi: 3.0.0
info:
  title: Bank Simulation API
  version: v1
  description: API for managing authentication, customer, and admin operations for a bank simulation.

servers:
  - url: http://localhost:5035/api/v1
  - url: http://localhost:5036/api/v1

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt-token

  schemas:
    Password:
      type: string
      minLength: 8
      pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^a-zA-Z0-9]).+$"
      description: Requires at least 8 characters with a mix of lowercase, uppercase, numbers, and symbols.
    Username:
      type: string
      minLength: 4
      maxLength: 20
      pattern: "^[a-zA-Z0-9_]+$"
    Email:
      type: string
      format: email
    BirthDate:
      type: string
      format: date
      example: "2000-12-30"
      pattern: "^\\d{4}-\\d{2}-\\d{2}$"
    Amount:
      type: number
      minimum: 10
      format: float
      description: The amount of money, with a minimum of 10.
    Role:
      type: string
      enum: [admin, customer]
    UUID:
      type: string
      format: uuid
    Token:
      type: string
      description: A JWT token for authentication or a temporary token for password reset.
    ResponseDto:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
    UserResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        no_id:
          $ref: "#/components/schemas/UUID"
        username:
          $ref: "#/components/schemas/Username"
        email:
          $ref: "#/components/schemas/Email"
        birth_date:
          $ref: "#/components/schemas/BirthDate"
        role:
          $ref: "#/components/schemas/Role"
        balance:
          $ref: "#/components/schemas/Amount"
    TransactionResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        type:
          $ref: "#/components/parameters/TypeParam/schema"
        amount:
          $ref: "#/components/schemas/Amount"
        sender_id:
          $ref: "#/components/schemas/UUID"
        receiver_id:
          $ref: "#/components/schemas/UUID"
        created_at:
          type: string
          format: date-time
    PaginatedUserResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/UserResponse"
        total_items:
          type: integer
        page:
          type: integer
    PaginatedTransactionResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/TransactionResponse"
        total_items:
          type: integer
        page:
          type: integer

  parameters:
    SearchParam:
      name: search
      in: query
      description: Search for exact matches on indexed fields like username, email, or user ID to ensure fast performance.
      required: false
      schema:
        type: string
    PageParam:
      name: page
      in: query
      description: Page number for pagination. By default, it shows 25 items per page.
      required: false
      schema:
        type: integer
        format: int32
        default: 1
    SortParam:
      name: sort
      in: query
      description: Sort order for transactions by created_at.
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
    TypeParam:
      name: type
      in: query
      description: Filter transactions by type.
      required: false
      schema:
        type: string
        enum:
          - received
          - send
          - withdrawal
    ResetPasswordToken:
      name: token_reset_password
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/Token"

paths:
  /auth/login:
    post:
      summary: Login
      description: Return JWT token (1 hour) and set as HttpOnly and SameSite=Lax cookie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  $ref: "#/components/schemas/Username"
                password:
                  $ref: "#/components/schemas/Password"
      responses:
        "200":
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                success:
                  value:
                    message: "Login successful."
                    success: true
        "400":
          description: Invalid credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidCredentials:
                  value:
                    message: "Invalid credentials."
                    success: false

  /auth/register:
    post:
      summary: Register User
      description: Register new user with the 'customer' role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - birthdate
              properties:
                username:
                  $ref: "#/components/schemas/Username"
                email:
                  $ref: "#/components/schemas/Email"
                password:
                  $ref: "#/components/schemas/Password"
                birthdate:
                  $ref: "#/components/schemas/BirthDate"
      responses:
        "201":
          description: Registration successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                success:
                  value:
                    message: "Registration successful."
                    success: true
        "400":
          description: Invalid input or username already registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                usernameTaken:
                  value:
                    message: "Username is already taken."
                    success: false
                invalidEmail:
                  value:
                    message: "Email format is invalid."
                    success: false

  /auth/logout:
    get:
      summary: Logout
      description: Invalidate JWT token.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Logout successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                success:
                  value:
                    message: "Logout successful."
                    success: true
        "401":
          description: Token missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidToken:
                  value:
                    message: "Token missing or invalid."
                    success: false

  /auth/me:
    get:
      summary: Get Authenticated User Info
      description: Check if JWT token is still valid and get authenticated user information.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Authenticated user info.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Token missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidToken:
                  value:
                    message: "Token missing or invalid."
                    success: false

  /auth/reset-password:
    post:
      summary: Request Password Reset
      description: Request a password reset link via email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  $ref: "#/components/schemas/Email"
      responses:
        "201":
          description: Link sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                success:
                  value:
                    message: "Password reset link has been sent to your email."
                    success: true
        "400":
          description: Invalid email.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidEmail:
                  value:
                    message: "Email is not in a valid format or does not exist."
                    success: false

    get:
      summary: Validate Password Reset Token
      description: Validate the reset password token from the email link.
      parameters:
        - $ref: "#/components/parameters/ResetPasswordToken"
      responses:
        "200":
          description: Token valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                success:
                  value:
                    message: "Token is valid."
                    success: true
        "400":
          description: Token invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidToken:
                  value:
                    message: "Invalid or expired token."
                    success: false

    put:
      summary: Change Password
      description: Change password using a reset token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tokenReset
                - password
              properties:
                tokenReset:
                  $ref: "#/components/schemas/Token"
                password:
                  $ref: "#/components/schemas/Password"
      responses:
        "200":
          description: Password changed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                success:
                  value:
                    message: "Password has been successfully changed."
                    success: true
        "400":
          description: Invalid token or password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidInput:
                  value:
                    message: "Invalid token or password does not meet requirements."
                    success: false

  /admin/top-up:
    post:
      summary: Top Up Customer Balance
      description: Top up a customer's balance. Minimum top-up amount is 10.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customer_id
                - amount
              properties:
                customer_id:
                  $ref: "#/components/schemas/UUID"
                amount:
                  $ref: "#/components/schemas/Amount"
      responses:
        "200":
          description: Top-up successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                success:
                  value:
                    message: "Top-up successful."
                    success: true
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidInput:
                  value:
                    message: "Invalid customer ID or amount is less than the minimum."
                    success: false

  /admin/customer:
    get:
      summary: View Customers
      description: View customers with filtering, sorting, and pagination.
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/SearchParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/SortParam"
      responses:
        "200":
          description: Get data successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUserResponse"
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidInput:
                  value:
                    message: "Invalid page or sort parameter."
                    success: false

  /admin/transaction:
    get:
      summary: View All Transactions
      description: View all transactions from all customers with filtering, sorting, and pagination.
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/SearchParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/SortParam"
        - $ref: "#/components/parameters/TypeParam"
      responses:
        "200":
          description: Get data successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedTransactionResponse"
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidInput:
                  value:
                    message: "Invalid page or sort parameter."
                    success: false

  /customer/send:
    post:
      summary: Send Money
      description: Send money to another customer. Minimum transfer amount is 10.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - receiver_id
                - amount
              properties:
                receiver_id:
                  $ref: "#/components/schemas/UUID"
                amount:
                  $ref: "#/components/schemas/Amount"
      responses:
        "200":
          description: Send successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                success:
                  value:
                    message: "Transaction successful. Money sent."
                    success: true
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidInput:
                  value:
                    message: "Invalid receiver ID or insufficient balance."
                    success: false

  /customer/withdrawal:
    post:
      summary: Withdraw Money
      description: Withdraw money from an account. Minimum withdrawal amount is 10.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  $ref: "#/components/schemas/Amount"
      responses:
        "200":
          description: Withdrawal successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                success:
                  value:
                    message: "Withdrawal successful."
                    success: true
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidInput:
                  value:
                    message: "Withdrawal amount is less than the minimum or exceeds your balance."
                    success: false

  /customer/transaction:
    get:
      summary: View My Transactions
      description: View your own transactions with filtering, sorting, and pagination.
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/SearchParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/SortParam"
        - $ref: "#/components/parameters/TypeParam"
      responses:
        "200":
          description: Get data successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedTransactionResponse"
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
              examples:
                invalidInput:
                  value:
                    message: "Invalid page or sort parameter."
                    success: false